"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};!function(e,t){switch(!0){case"function"==typeof define&&e.define===define&&!!define.amd:define(t);break;case"object"===("undefined"==typeof module?"undefined":_typeof(module))&&e===module.exports:module.exports=t();break;case!e.MultiSet:Object.defineProperty(e,"MultiSet",{value:t(),enumerable:!0});break;default:console.error("'MultiSet' is already defined on root object")}}(void 0,function(){function e(e){this.init(e)}function t(e,t){for(var n in t)if(t.hasOwnProperty(n)){var r=Object.getOwnPropertyDescriptor(t,n),o=r.value&&(r.value+"").match(/@aliases:(.*?);/),i=o?o[1].match(/[\w\$]+/g):[];i.unshift(n),i.forEach(function(t){return Object.defineProperty(e,t,r)})}return e}return t(e.prototype,{$info:{name:"cell-multiset",description:"Fast JS MultiSet implementation.",version:"0.0.0",url:"https://github.com/unnoon/cell-multiset"},$create:function(t){"@aliases: $spawn";return Object.create(e.prototype).init(t)},init:function(e){if(this.elements=new Map,e){var t=!0,n=!1,r=void 0;try{for(var o,i=e[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;this.add(a)}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}}},add:function(){for(var e,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];for(var o=0,i=n.length;o<i;o++)e=n[o],this.elements.set(e,(this.elements.get(e)||0)+1);return this},has:function(e){"@aliases: isMember";return!!this.elements.get(e)}}),e});